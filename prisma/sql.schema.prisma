generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  prettier                        = "true"
  outputToNestJsResourceStructure = "true"
  fileNamingStyle                 = "kebab"
  classValidation                 = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  /// @DtoReadOnly
  /// @IsUUID
  userId        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  /// @DtoUpdateHidden
  createdAt     DateTime   @default(now())
  /// @IsEmail
  userEmail     String     @unique
  userRole      Role       @default(CLIENT)
  loyaltyPoints Int        @default(0)
  employeeInfo  Employee[]
}

model Employee {
  /// @DtoReadOnly
  /// @IsUUID
  employeeId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  hiredAt    DateTime  @default(now())
  /// @DtoReadOnly
  firedAt    DateTime?

  firstName String
  lastName  String

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnCreate
  address   Address @relation(fields: [addressId], references: [addressId])
  /// @IsUUID
  addressId String  @db.Uuid

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  user   User   @relation(fields: [userId], references: [userId])
  /// @IsUUID
  userId String @db.Uuid

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnUpdate
  /// @DtoRelationCanConnectOnUpdate
  restaurant   Restaurant @relation("workedAtRestaurant", fields: [restaurantId], references: [restaurantId])
  /// @IsUUID
  restaurantId String     @db.Uuid

  /// @DtoRelationRequired
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnUpdate
  /// @DtoRelationCanConnectOnUpdate
  job   Job    @relation(fields: [jobId], references: [jobId])
  /// @IsUUID
  jobId String @db.Uuid

  salary      Float
  managerInfo Manager[]
}

model Job {
  /// @DtoReadOnly
  /// @IsUUID
  jobId     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  createdAt DateTime @default(now())
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt

  jobTitle  String
  minSalary Float
  maxSalary Float
  role      Role
  employees Employee[]
}

model Manager {
  /// @DtoReadOnly
  /// @IsUUID
  managerId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnUpdate
  /// @DtoRelationCanCreateOnUpdate
  employee   Employee @relation(fields: [employeeId], references: [employeeId])
  /// @IsUUID
  employeeId String   @db.Uuid

  managedRestaurants Restaurant[] @relation("managedRestaurants")
}

model Menu {
  /// @DtoReadOnly
  /// @IsUUID
  itemId    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  createdAt DateTime @default(now())
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt

  name            String
  photoUrl        String
  description     String?
  /// @Min(0.01)
  price           Float
  /// @Min(0)
  /// @Max(5)
  rating          Float?
  numberOfRatings Int?
  /// @description a list of ingredients separated by `,`
  ingredients     String?
  available       Boolean @default(true)

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnUpdate
  /// @DtoRelationCanCreateOnUpdate
  category   Category @relation(fields: [categoryId], references: [categoryId])
  /// @IsUUID
  categoryId String   @db.Uuid
}

model Category {
  /// @DtoReadOnly
  /// @IsUUID
  categoryId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  createdAt  DateTime @default(now())

  available    Boolean @default(true)
  categoryName String
  photoUrl     String
  menuItems    Menu[]
}

model Restaurant {
  /// @DtoReadOnly
  /// @IsUUID
  restaurantId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  createdAt    DateTime @default(now())
  available    Boolean  @default(true)

  /// @IsLatitude
  geoLat Float
  /// @IsLongitude
  geoLon Float

  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanConnectOnUpdate
  manager   Manager? @relation("managedRestaurants", fields: [managerId], references: [managerId])
  /// @IsUUID
  managerId String?  @db.Uuid

  /// @DtoRelationRequired
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnUpdate
  /// @DtoRelationCanConnectOnUpdate
  address   Address @relation(fields: [addressId], references: [addressId])
  /// @IsUUID
  addressId String  @db.Uuid

  /// @DtoRelationRequired
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanCreateOnUpdate
  openingHours OpeningHours[]

  /// @DtoReadOnly
  openingHoursPretty String?

  /// @IsUrl
  photoUrl String?
  /// @IsPhoneNumber
  phoneNumber String?

  hiredEmployees Employee[] @relation("workedAtRestaurant")
}

model OpeningHours {
  /// @DtoReadOnly
  /// @IsUUID
  openingHoursId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weekday        Weekday
  startHourUtc   DateTime   @db.Time(6)
  endHourUtc     DateTime   @db.Time(6)
  /// @IsUUID
  restaurantId   String     @db.Uuid
  restaurant     Restaurant @relation(fields: [restaurantId], references: [restaurantId])
}

model Address {
  /// @DtoReadOnly
  /// @IsUUID
  addressId   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  street      String
  streetNo    String
  city        String
  postalCode  String
  country     String
  employees   Employee[]
  restaurants Restaurant[]
}

enum Role {
  CLIENT
  EMPLOYEE
  DELIVERY
  MANAGER
  BOSS
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
