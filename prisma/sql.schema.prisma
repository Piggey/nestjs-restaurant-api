// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// in order for schema changes to take effect use
// npm run db:migrate

// we're using nestjs-dto generator
// which also created swagger docs
// more options here: https://www.npmjs.com/package/@brakebein/prisma-generator-nestjs-dto

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// turns out we need both generators
generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  outputToNestJsResourceStructure = "true"
  classValidation                 = "true"
  prettier                        = "true"
  fileNamingStyle                 = "kebab"
}

enum Role {
  CLIENT
  EMPLOYEE
  DELIVERY
  MANAGER
  BOSS
}

model User {
  /// @DtoReadOnly
  userId        Int        @id @default(autoincrement())
  /// @DtoReadOnly
  /// @DtoUpdateHidden
  createdAt     DateTime   @default(now())
  /// @IsEmail
  userEmail     String     @unique
  userRole      Role       @default(CLIENT)
  loyaltyPoints Int        @default(0)
  employeeInfo  Employee[]
}

model Employee {
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  employeeId Int       @id @default(autoincrement())
  /// @DtoReadOnly
  /// @DtoUpdateHidden
  hiredAt    DateTime  @default(now())
  /// @DtoReadOnly
  firedAt    DateTime?

  firstName String
  lastName  String

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnCreate
  address   Address @relation(fields: [addressId], references: [addressId])
  addressId Int

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  user   User @relation(fields: [userId], references: [userId])
  userId Int

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnUpdate
  /// @DtoRelationCanConnectOnUpdate
  restaurant   Restaurant @relation(name: "workedAtRestaurant", fields: [restaurantId], references: [restaurantId])
  restaurantId Int

  /// @DtoRelationRequired
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnUpdate
  /// @DtoRelationCanConnectOnUpdate
  job Job @relation(fields: [jobId], references: [jobId])
  jobId Int
  salary Float

  managerInfo Manager[]
}

model Job {
  /// @DtoReadOnly
  jobId Int       @id @default(autoincrement())
  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt()

  jobTitle String
  minSalary Float
  maxSalary Float
  role Role

  employees Employee[]
}

model Manager {
  /// @DtoReadOnly
  managerId Int @id @default(autoincrement())

  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanConnectOnUpdate
  /// @DtoRelationCanCreateOnUpdate
  employee   Employee @relation(fields: [employeeId], references: [employeeId])
  employeeId Int

  /// @DtoRelationCanConnectOnUpdate
  /// @DtoRelationCanConnectOnCreate
  managedRestaurants Restaurant[] @relation(name: "managedRestaurants")
}

model Menu {
  /// @DtoReadOnly
  itemId    Int      @id @default(autoincrement())
  /// @DtoReadOnly
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  name            String
  photoUrl        String
  description     String?
  /// @Min(0.01)
  price           Float
  /// @Min(0)
  /// @Max(5)
  rating          Float?
  numberOfRatings Int?
  /// @description a list of ingredients separated by `,`
  ingredients     String?
  available       Boolean @default(true)

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnUpdate
  /// @DtoRelationCanCreateOnUpdate
  category   Category @relation(fields: [categoryId], references: [categoryId])
  categoryId Int
}

model Category {
  /// @DtoReadOnly
  categoryId Int      @id @default(autoincrement())
  /// @DtoReadOnly
  createdAt  DateTime @default(now())
  available  Boolean  @default(true)

  categoryName String

  menuItems Menu[]
}

model Restaurant {
  /// @DtoReadOnly
  restaurantId Int      @id @default(autoincrement())
  /// @DtoReadOnly
  createdAt    DateTime @default(now())
  available    Boolean  @default(true)

  /// @IsLatitude
  geoLat Float
  /// @IsLongitude
  geoLon Float

  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanConnectOnUpdate
  manager   Manager? @relation(name: "managedRestaurants", fields: [managerId], references: [managerId])
  managerId Int?

  /// @DtoRelationRequired
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnUpdate
  /// @DtoRelationCanConnectOnUpdate
  address   Address @relation(fields: [addressId], references: [addressId])
  addressId Int

  /// @DtoRelationRequired
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanCreateOnUpdate
  openingHours OpeningHours[]

  hiredEmployees Employee[] @relation(name: "workedAtRestaurant")
}

model OpeningHours {
  /// @DtoReadOnly
  openingHoursId Int      @id @default(autoincrement())
  weekday        Weekday
  startHourUtc   DateTime @db.Time()
  endHourUtc     DateTime @db.Time()

  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId Int
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Address {
  /// @DtoReadOnly
  addressId  Int    @id @default(autoincrement())
  street     String
  streetNo   String
  city       String
  postalCode String
  country    String

  restaurants Restaurant[]
  employees   Employee[]
}
