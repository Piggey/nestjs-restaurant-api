generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  prettier                        = "true"
  outputToNestJsResourceStructure = "true"
  fileNamingStyle                 = "kebab"
  classValidation                 = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  /// @DtoReadOnly
  userId        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  /// @DtoUpdateHidden
  createdAt     DateTime   @default(now())
  /// @IsEmail
  userEmail     String     @unique
  userRole      Role       @default(CLIENT)
  loyaltyPoints Int        @default(0)
  employeeInfo  Employee[]
}

model Employee {
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  employeeId   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  /// @DtoUpdateHidden
  hiredAt      DateTime   @default(now())
  /// @DtoReadOnly
  firedAt      DateTime?
  firstName    String
  lastName     String
  addressId    String     @db.Uuid
  userId       String     @db.Uuid
  restaurantId String     @db.Uuid
  jobId        String     @db.Uuid
  salary       Float
  address      Address    @relation(fields: [addressId], references: [addressId])
  job          Job        @relation(fields: [jobId], references: [jobId])
  restaurant   Restaurant @relation("workedAtRestaurant", fields: [restaurantId], references: [restaurantId])
  user         User       @relation(fields: [userId], references: [userId])
  managerInfo  Manager[]
}

model Job {
  /// @DtoReadOnly
  jobId     String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  createdAt DateTime   @default(now())
  /// @DtoReadOnly
  updatedAt DateTime   @updatedAt
  jobTitle  String
  minSalary Float
  maxSalary Float
  role      Role
  employees Employee[]
}

model Manager {
  /// @DtoReadOnly
  managerId          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId         String       @db.Uuid
  employee           Employee     @relation(fields: [employeeId], references: [employeeId])
  managedRestaurants Restaurant[] @relation("managedRestaurants")
}

model Menu {
  /// @DtoReadOnly
  itemId          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  photoUrl        String
  description     String?
  /// @Min(0.01)
  price           Float
  /// @Min(0)
  /// @Max(5)
  rating          Float?
  numberOfRatings Int?
  /// @description a list of ingredients separated by `,`
  ingredients     String?
  available       Boolean  @default(true)
  categoryId      String   @db.Uuid
  category        Category @relation(fields: [categoryId], references: [categoryId])
}

model Category {
  /// @DtoReadOnly
  categoryId   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  createdAt    DateTime @default(now())
  available    Boolean  @default(true)
  categoryName String
  menuItems    Menu[]
}

model Restaurant {
  /// @DtoReadOnly
  restaurantId   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoReadOnly
  createdAt      DateTime       @default(now())
  available      Boolean        @default(true)
  /// @IsLatitude
  geoLat         Float
  /// @IsLongitude
  geoLon         Float
  managerId      String?        @db.Uuid
  addressId      String         @db.Uuid
  hiredEmployees Employee[]     @relation("workedAtRestaurant")
  openingHours   OpeningHours[]
  address        Address        @relation(fields: [addressId], references: [addressId])
  manager        Manager?       @relation("managedRestaurants", fields: [managerId], references: [managerId])
}

model OpeningHours {
  /// @DtoReadOnly
  openingHoursId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weekday        Weekday
  startHourUtc   DateTime   @db.Time(6)
  endHourUtc     DateTime   @db.Time(6)
  restaurantId   String     @db.Uuid
  restaurant     Restaurant @relation(fields: [restaurantId], references: [restaurantId])
}

model Address {
  /// @DtoReadOnly
  addressId   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  street      String
  streetNo    String
  city        String
  postalCode  String
  country     String
  employees   Employee[]
  restaurants Restaurant[]
}

enum Role {
  CLIENT
  EMPLOYEE
  DELIVERY
  MANAGER
  BOSS
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
