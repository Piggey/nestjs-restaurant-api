// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// in order for schema changes to take effect use
// npm run db:migrate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Role {
  CLIENT
  EMPLOYEE
  DELIVERY
  MANAGER
  BOSS
}

model User {
  userId     String   @unique
  createdAt DateTime @default(now())

  userDetails   String
  loyaltyPoints Int     @default(0)
  role          Role    @default(CLIENT)

  employeeInfo Employee[]
}

model Employee {
  employeeId Int @id @default(autoincrement())
  hiredAt DateTime @default(now())
  firedAt DateTime?

  firstName String
  lastName String
  pesel String @unique

  addressId Int
  address Address @relation(fields: [addressId], references: [addressId])

  userId String
  user User @relation(fields: [userId], references: [userId])

  restaurantId Int
  restaurant Restaurant @relation(name: "workedAtRestaurant", fields: [restaurantId], references: [restaurantId])

  managedRestaurants Restaurant[] @relation(name: "managedRestaurants")
}

model MenuItem {
  itemId Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  name String
  photoUrl String
  description String
  ingredients String
  available Boolean @default(true)

  categoryId Int
  category Category @relation(fields: [categoryId], references: [categoryId])
}

model Category {
  categoryId Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  categoryName String

  menuItems MenuItem[]
}

model Restaurant {
  restaurantId Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  geoLat Float
  geoLong Float

  managerId Int
  manager Employee @relation(name: "managedRestaurants", fields: [managerId], references: [employeeId])

  addressId Int
  address Address @relation(fields: [addressId], references: [addressId])

  hiredEmployees Employee[] @relation(name: "workedAtRestaurant")
}

model Address {
  addressId Int @id @default(autoincrement())
  street String
  streetNo String
  city String
  postalCode String
  country String

  restaurants Restaurant[]
  employees Employee[]
}
