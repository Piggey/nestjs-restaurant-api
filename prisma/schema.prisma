// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// in order for schema changes to take effect use
// npm run db:migrate

// we're using nestjs-dto generator
// which also created swagger docs
// more options here: https://www.npmjs.com/package/@brakebein/prisma-generator-nestjs-dto

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator nestjsDto {
  provider = "prisma-generator-nestjs-dto"
  output = "../src"
  outputToNestJsResourceStructure = "true"
  classValidation = "true"
  prettier = "true"
}

enum Role {
  CLIENT
  EMPLOYEE
  DELIVERY
  MANAGER
  BOSS
}

model User {
  /// @DtoUpdateHidden
  /// @IsByteLength(32, 32)
  userId     String   @unique
  /// @DtoReadOnly
  /// @DtoUpdateHidden
  createdAt DateTime @default(now())

  userDetails   String
  loyaltyPoints Int     @default(0)
  role          Role    @default(CLIENT)
  employeeInfo Employee[]
}

model Employee {
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  employeeId Int @id @default(autoincrement())
  /// @DtoReadOnly
  /// @DtoUpdateHidden
  hiredAt DateTime @default(now())
  firedAt DateTime?

  firstName String
  lastName String
  /// @IsByteLength(11, 11)
  pesel String @unique

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnCreate
  address Address @relation(fields: [addressId], references: [addressId])
  addressId Int

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  user User @relation(fields: [userId], references: [userId])
  /// @IsByteLength(32, 32)
  userId String

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnUpdate
  /// @DtoRelationCanConnectOnUpdate
  restaurant Restaurant @relation(name: "workedAtRestaurant", fields: [restaurantId], references: [restaurantId])
  restaurantId Int

  /// DtoRelationCanConnectOnUpdate
  managedRestaurants Restaurant[] @relation(name: "managedRestaurants")
}

model Menu {
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  itemId Int @id @default(autoincrement())
  /// @DtoReadOnly
  /// @DtoUpdateHidden
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  name String
  photoUrl String
  description String
  /// @description a list of ingredients separated by `,`
  ingredients String
  available Boolean @default(true)

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnUpdate
  /// @DtoRelationCanCreateOnUpdate
  category Category @relation(fields: [categoryId], references: [categoryId])
  categoryId Int
}

model Category {
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  categoryId Int @id @default(autoincrement())
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  createdAt DateTime @default(now())

  categoryName String

  menuItems Menu[]
}

model Restaurant {
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  restaurantId Int @id @default(autoincrement())
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  createdAt DateTime @default(now())

  /// @IsLatitude
  geoLat Float
  /// @IsLongitude
  geoLong Float

  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanConnectOnUpdate
  manager Employee? @relation(name: "managedRestaurants", fields: [managerId], references: [employeeId])
  managerId Int?

  /// @DtoRelationRequired
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanCreateOnUpdate
  /// @DtoRelationCanConnectOnUpdate
  address Address @relation(fields: [addressId], references: [addressId])
  addressId Int

  hiredEmployees Employee[] @relation(name: "workedAtRestaurant")
}

model Address {
  /// @DtoUpdateHidden
  /// @DtoReadOnly
  addressId Int @id @default(autoincrement())
  street String
  streetNo String
  city String
  postalCode String
  country String

  restaurants Restaurant[]
  employees Employee[]
}
